name: Docker

on:
  push:
    # Publish `$default-branch` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: blockchain-tool

jobs:
#   # Run tests.
#   # See also https://docs.docker.com/docker-hub/builds/automated-testing/
#   test:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v2

#       - name: Run tests
#         run: |
#           if [ -f docker-compose.test.yml ]; then
#             docker-compose --file docker-compose.test.yml build
#             docker-compose --file docker-compose.test.yml run sut
#           else
#             docker build . --file Dockerfile
#           fi
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
#     # Ensure test job passes before pushing image.
#     needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
#         run: docker build . --file Dockerfile --tag $IMAGE_NAME
        run: docker build -f ./src/main/docker/Dockerfile.jvm --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "$default-branch" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
 
#       -
#         name: Prepare
#         id: prep
#         run: |
#           DOCKER_IMAGE=name/app
#           VERSION=edge
#           if [[ $GITHUB_REF == refs/tags/* ]]; then
#             VERSION=${GITHUB_REF#refs/tags/v}
#           fi
#           if [ "${{ github.event_name }}" = "schedule" ]; then
#             VERSION=nightly
#           fi
#           TAGS="${DOCKER_IMAGE}:${VERSION}"
#           if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
#             TAGS="$TAGS,${DOCKER_IMAGE}:latest"
#           fi
#           echo ::set-output name=tags::${TAGS}
#       -
#         name: Set up QEMU
#         uses: docker/setup-qemu-action@v1
#       -
#         name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v1
#       -
#         name: Login to DockerHub
#         if: github.event_name != 'pull_request'
#         uses: docker/login-action@v1 
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}
#       -
#         name: Build and push
#         id: docker_build
#         uses: docker/build-push-action@v2
#         with:
#           context: .
#           file: ./src/main/docker/Dockerfile.jvm
#           platforms: linux/amd64,linux/arm64
#           push: ${{ github.event_name != 'pull_request' }}
#           tags: ${{ steps.prep.outputs.tags }}
          
#       -
#         name: Image digest 
#         run: echo ${{ steps.docker_build.outputs.digest }}

